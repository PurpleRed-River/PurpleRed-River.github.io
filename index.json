[{"categories":["笔记"],"content":"MI 9 + Pixel Experience + Magisk ","date":"2023-04-14","objectID":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/:0:0","tags":["杂项"],"title":"MI9 Pixel Experience + Magisk","uri":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/"},{"categories":["笔记"],"content":"前言 MI 9 最近突发恶疾，每天都会突然黑屏，开机卡 MIUI 界面，LOG 还变黄，经常需要多次尝试不同姿势重启才能开机，就把已经用了万年的 MIUI 10 更新到了 MIUI 12，但遗憾的是更新了以后故障依旧。百度了一下，可能是烧了什么芯片或者 CPU 或者电源管理芯片虚焊。遂决定喜迎新机，毕竟 MI 9 陪伴我也有 4 年了。既然 MI 9 闲下来了，准备解锁刷个 ROM。先玩着，等故障发生比较频繁了去售后看看能不能修。 在大佬指点和百度下选择了 Pixel Experience 系统，顺便 root 了，装上 Magisk 和 LSPosed。 本文整理记录一下大致过程，只供参考，如果对您有帮助那就太好了。 ","date":"2023-04-14","objectID":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/:1:0","tags":["杂项"],"title":"MI9 Pixel Experience + Magisk","uri":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/"},{"categories":["笔记"],"content":"文件 ├─Apk │ │ FoxMMM-v1.1.0-default-arm64-v8a-release.apk │ │ MT2.13.3-CoolApk-21048-o_1grsjcuebsig1bdl1g4jvmq1cgp13-uid-394584.apk │ │ │ ├─Magisk │ │ │ Magisk-v26.1.apk │ │ │ │ │ └─Mode │ │ CustomPinyinDictionary_Gboard_Magisk_20230413.zip │ │ Font_Manager-v5.7.6-127.zip │ │ LSPosed-v1.8.6-6712-zygisk-release.zip │ │ Shamiko-v0.7-161-release.zip │ │ │ └─Sufboard │ mobile-arm64-v8a-release.apk │ smallstrawberry.conf │ ├─Image │ │ cepheus_eea_global_images_V12.5.2.0.RFAEUXM_20211112.0000.00_11.0_eea_655e654e8a.tgz # EU版MIUI │ │ cepheus_images_V12.5.6.0.RFACNXM_20211125.0000.00_11.0_cn_8d261e6804.tgz # 国行版MIUI │ │ PixelExperience_cepheus-13.0-20221127-0218-OFFICIAL.zip # PixelExperience │ │ xiaomi.eu_multi_MI9_V12.5.6.0.RFACNXM_v12-11.zip # EU版MIUI │ │ │ └─Recovery │ PixelExperience_cepheus-13.0-20221127-0218-OFFICIAL.img # PixelExperience配套rec │ twrp-3.5.2_9-0-cepheus.img # 第三方rec │ └─Tools MiFlash2020-3-14-0.rar # XIAOMI 线刷工具 miflash_unlock-6.5.406.31.zip # XIAOMI 解锁工具（这里面自带 Fastboot） platform-tools_r34.0.1-windows.zip # ADB ","date":"2023-04-14","objectID":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/:2:0","tags":["杂项"],"title":"MI9 Pixel Experience + Magisk","uri":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/"},{"categories":["笔记"],"content":"过程 ","date":"2023-04-14","objectID":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/:3:0","tags":["杂项"],"title":"MI9 Pixel Experience + Magisk","uri":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/"},{"categories":["笔记"],"content":"解锁 Bootloader 小米手机解锁需要小米账号，和小米官方的解锁工具。 MIUI 解锁工具 手机需要登录小米账号并在有 SIM 卡的情况下使用数据流量在“设置 -\u003e 开发者选项 -\u003e 设备解锁状态”中绑定设备。 注意事项： 去 “我的设备 -\u003e 全部参数” 重复点击 “MIUI 版本” 开启开发者模式。 MI 9 进入 Fastboost 方式：关机后，同时按住电源键和音量键下直到出现 “MI” 标志。 如果提示因为账号问题无法解锁，只能等待限制时间到期，或者更换账号。 解锁完毕后，及时退出手机的小米账号和谷歌账号。 ","date":"2023-04-14","objectID":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/:3:1","tags":["杂项"],"title":"MI9 Pixel Experience + Magisk","uri":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/"},{"categories":["笔记"],"content":"重新刷入国行 MIUI 中间我直接清空了所有分区装上了 Pixel Experience 发现有一些问题，百度了一下决定先重新刷个 MIUI，开始刷了 EU 版 MIUI 好多系统软件没有懒得搞其他的了，于是又重新刷了国行包。 去小米官方网站下载线刷工具在以下网站查找 MI 9（需要代理到国外访问） https://c.mi.com/global/miuidownload/index 找到“MI 9 -\u003e Flashing Guide -\u003e Fastboot Update -\u003e Download MIUI ROM Flashing Tool(Size: 66.7 MB)” MIUI ROM Flashing Tool 下载 在 XiaomiROM 直接搜索小米 9 (cepheus)下载国行线刷包。 XiaomiROM 网站 开始刷机，提前退出小米账号和谷歌账号。 运行 XiaoMiFlash.exe -\u003e 手机进入 Fastboost 模式 -\u003e 手机插入电脑- \u003e 点击Driver -\u003e 点击安装（默认把所有需要的驱动装入电脑） 回到 XiaoMiFlash 首页 -\u003e 点击选择 -\u003e 选择解压的文件夹 -\u003e 点击加载设备 -\u003e 点击加载出的设备 -\u003e 点击右下角全部删除 -\u003e 刷机 一定要选择“全部删除”，默认是删除加锁。 稍作等待，刷完后将小米的系统软件全部安装更新一遍，更新完毕后退出小米账号即可。 ","date":"2023-04-14","objectID":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/:3:2","tags":["杂项"],"title":"MI9 Pixel Experience + Magisk","uri":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/"},{"categories":["笔记"],"content":"刷入 Pixel Experience 到 Pixel Experience 官网，点击 devices 按照机型查找相关 ROM。 Pixel Experience 官网 Pixel Experience 官网 - Xiaomi Mi 9 选择最新的版本（13）将镜像和 Recovery 都下载下来。 使用 Fastboot 安装 Pixel Experience Recovery Pixel Experience Recovery 是第三方（非小米）的恢复程序。在这里使用这个配套刷入系统。 手机进入 Fastboot 模式（电源键 + 音量下）并将手机与电脑连接，将 Pixel Experience Recovery 放到和 fastboot 工具一个目录下，输入命令： .\\fastboot.exe flash recovery PixelExperience_cepheus-13.0-20221127-0218-OFFICIAL.img fastboot 工具在 XIAOMI 的解锁工具里有，我直接在解锁工具的目录里用的。 从 Recovery 安装Pixel Experience MI 9 进入 Recovery 方式：关机后，同时按住电源键和音量键上直到出现 “MI” 标志。 进入 Recovery 点击 Factory Reset ，然后点击 Format data/ 格式化数据分区。 格式化完成后点击左上角返回按钮，返回到主菜单，点击 Apply from ADB 并将手机与电脑连接。 电脑下载 ADB 工具。 Android SDK Platform-Tools 是 Android SDK 的一个组件。它包含与 Android 平台进行交互的工具，主要是 adb 和 fastboot。 ANDROID STUDIO SDK 平台工具 在电脑上，将 Pixel Experience 包放到ADB 工具的目录下，使用命令： ./Adb sideload PixelExperience_cepheus-13.0-20221127-0218-OFFICIAL.zip **提示：**通常情况下，adb 会报告Total xfer: 1.00x，但在某些情况下，即使进程成功，输出也会停止在 47% 并报告Total xfer: 0.98xor adb: failed to read command: Success。在某些情况下，它会报告adb: failed to read command: No errororadb: failed to read command: Undefined error: 0也可以。 然后解决一下开机启用页面设置，连接 WIFI 无法跳过的问题，输入命令修改 FRP 标志位： ./Adb shell dd if=/dev/zero of=/dev/block/bootdevice/by-name/frp 等待完成后，手机返回到主菜单，点击 Reboot system now 即可。 重启之后，成功进入系统开始设置。 ","date":"2023-04-14","objectID":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/:3:3","tags":["杂项"],"title":"MI9 Pixel Experience + Magisk","uri":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/"},{"categories":["笔记"],"content":"安装 Magisk 先到 GitHub 下载最新的 Magisk（记录时最新版本为 v26.1）。 Magisk - GitHub 手机安装一下，完成后进去，Ramdisk 已经是 Yes 了，接下来修补一下 boot.img。 boot.img 从 PixelExperience_cepheus-13.0-20221127-0218-OFFICIAL.zip，解压出来即可。 将 boot.img 放到手机中，在 Magisk 的主页面的 Magisk（也就是第一个）选择 Install，方式为 选择并修补一个文件，选择刚刚放进去的 boot.img 选中，完成后重启。 重启后就可以设置 Magisk 并继续安装 LSPosed 等等了。 ","date":"2023-04-14","objectID":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/:3:4","tags":["杂项"],"title":"MI9 Pixel Experience + Magisk","uri":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/"},{"categories":["笔记"],"content":"写在末尾 过程基本就是这样，接下来看看有什么模块比较好用有意思来试一试了。 ","date":"2023-04-14","objectID":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/:4:0","tags":["杂项"],"title":"MI9 Pixel Experience + Magisk","uri":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/"},{"categories":["笔记"],"content":"参考链接 https://zhuanlan.zhihu.com/p/408114647 https://wiki.pixelexperience.org/devices/cepheus/install/ https://topjohnwu.github.io/Magisk/install.html ","date":"2023-04-14","objectID":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/:5:0","tags":["杂项"],"title":"MI9 Pixel Experience + Magisk","uri":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/"},{"categories":["笔记"],"content":"附录 https://github.com/LSPosed/LSPosed https://github.com/wuhgit/CustomPinyinDictionary https://github.com/Fox2Code/FoxMagiskModuleManager https://github.com/DJ131452DJ/Shamiko_for_Magisk ","date":"2023-04-14","objectID":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/:6:0","tags":["杂项"],"title":"MI9 Pixel Experience + Magisk","uri":"/mi9%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8C%97/"},{"categories":["笔记"],"content":"前言 我对于docker一直有断断续续的使用，但仅限于用 docker hub 寻找漏洞环境，简单的拉取和使用，搭起来博客之后，想来多少应该写点什么，正好在学校“坐牢”的日子里有云计算的大佬玩 k8s 引起一些兴趣，同时有重头系统的学习一些知识的打算，便决定从 docker 的使用开始，顺便搭几个靶场环境，方便学习。 最重要的是做一些简单的摘抄和记录，以供后面翻阅参考，摆脱之前东一榔头西一棒槌的学习模式。接下来记录的内容中有关 Docker 的，主要是 Docker-从入门到实践 的内容，外加其他一些博客等，此外感谢给予指导的大佬们的支持。 ","date":"2022-07-18","objectID":"/2022071801/:1:0","tags":["Docker","学习"],"title":"Docker 笔记（一）","uri":"/2022071801/"},{"categories":["笔记"],"content":"Docker 的简单介绍 Docker 是一个开源的应用容器引擎，基于 Go语言开发，使用Linux内核相关技术，对进程进行分装隔离，属于操作系统层面的虚拟化技术，应用了沙箱的机制，相互之间没有任何接口。 ","date":"2022-07-18","objectID":"/2022071801/:2:0","tags":["Docker","学习"],"title":"Docker 笔记（一）","uri":"/2022071801/"},{"categories":["笔记"],"content":"Docker 的三个基本概念 ","date":"2022-07-18","objectID":"/2022071801/:3:0","tags":["Docker","学习"],"title":"Docker 笔记（一）","uri":"/2022071801/"},{"categories":["笔记"],"content":"镜像（Image） Docker 镜像是一个特殊的文件系统包含一些为运行准备的配置参数，但不包含任何动态数据，其内容在构建之后也不会被改变。 镜像的多层特性 严格来说，Docker 镜像并不是 ISO 那样的打包文件，而只是一个虚拟的概念，是由一组文件系统在多层上联合组成。Docker 镜像在构建时会一层层构建，前一层是后一层的基础。每一层构建完成后就不会再改变，哪怕是对上一层进行删改，也仅仅只是在当前层进行标记。 也就是说每一层在确定构建完全之前，一定要确认只包含了必要的东西。 镜像的体积 docker 镜像的体积，在仓库中一般显示的是压缩后的大小，而拉取到本地后检视的则是展开的大小。值得注意的是，由于 Docker 镜像是多层存储结构，并可以继承、复用，因此不同镜像可以使用相同的基础镜像，这样一来显示镜像占用的硬盘大小的总和一般比实际要小的多。 要想列出已经下载下来的镜像，可以使用 docker image ls 命令。列表包含了仓库名、标签、镜像 ID、创建时间以及所占用的空间。 运行命令出现镜像仓库名和标签均为 \u003cnone\u003e 的情况，这是虚悬镜像 (dangling image) ，可以使用 docker image ls -f dangling=true 来查看，一般这种镜像是因为，官方对镜像进行了维护，镜像名被转移到新的镜像去了，可以使用命令 docker image prune 删除。 中间层镜像 中间层镜像可以加速构建重复利用资源，命令 docker image ls 默认只会显示顶层镜像，如果希望显示可以加 -a 参数。使用后可以看到许多无标签的镜像，但与虚悬镜像不同，不可以随意删除，因为中间层镜像是别的镜像的依赖，同时相同的层在 Docker 中只会保存一遍，对空间占用影响不大。 删除镜像时的两个行为 删除本地的镜像，使用 docker image rm 命令，Docker 镜像的删除行为分两类： Untagged 取消标签 Deleted 删除镜像 前面我们知道了，镜像是分层的，而且中间层可以被多个镜像使用。所以在进行删除行为时，会先从上层向基础层依次取消每层的标签，并判断取消后没有其他标签后才会执行删除。也就是说并非所有的 docker image rm 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。 除镜像的依赖之外，还要注意有没有容器对要删除的镜像有依赖，毕竟容器是以镜像为基础，再加一层容器存储层去运行的。 镜像的构成与定制 Dockerfile 文件 Dockerfile 文件中包含一条条指令，文件用来构建镜像，每一条构建一层。 通过 FROM 指定一个基础镜像，并且必须是第一条指令，有一个特殊镜像 scratch ，这个镜像是虚拟的概念，表示空白。 通过 RUN 来执行命令，有 shell 格式 RUN \u003c命令\u003e 和 exec 格式 RUN [\"可执行文件\", \"参数1\", \"参数2\"] 这种更像是函数调用的格式。值得注意的是，执行命令每一条就代表构建一层镜像，构建命令时可可以用 \u0026\u0026 来串联起多条语句，同时最后一定要进行清理无关文件等操作。 #FROM 指定基础镜像 FROM debian:stretch #RUN 执行命令 RUN apt-get update \\ \u0026\u0026 apt-get purge -y --auto-remove $buildDeps commit 与 build 构建命令 命令 docker commit [选项] \u003c容器ID或容器名\u003e [\u003c仓库名\u003e[:\u003c标签\u003e]] 用来生成黑箱镜像，也就是将容器的存储层保存下来成为镜像，但这种方法只适用于入侵后保存现场等特殊情况，因为他不像使用 Dockerfile 文件进行构建，容器内执行过什么命令进行过什么操作没有直观记录，而且容器内的修改调试，有大量重复臃肿的内容，通过 commit 构建之后，不仅大小会大很多，而且因为具体操作不清晰，对后期的维护十分不便。 命令 docker build [选项] \u003c上下文路径/URL/-\u003e 可以使用 Dockerfile 文件来构建镜像， 最后的上下文路径要注意，为相对路径，一般来说，把需要构建入镜像的文件放到 Dockerfile 所在目录，用 . 表示为当前目录。docker build 还支持从 URL 构建，比如通过 Git repo、压缩包等。 ","date":"2022-07-18","objectID":"/2022071801/:3:1","tags":["Docker","学习"],"title":"Docker 笔记（一）","uri":"/2022071801/"},{"categories":["笔记"],"content":"容器（Container） 在 Docker 中，镜像与容器的关系，镜像是静态的定义，容器是镜像运行时的实体。容器的实质是进程，这里有一个新的名词“命名空间”。在容器进程运行时属于自己的独立的命名空间。 命名空间是Linux内核的一项功能，可以对内核资源进行分区，以便一组进程看到一组资源，而另一组进程看到另一组资源。 同样的，容器也是分层存储的，在运行时，以镜像为基础层，在其上创建容器存储层。容器存储层的生存周期和容器一样，容器消亡时也随之消亡。最好来说，容器存储层要保持无状态化，也就是不写入任何数据。所有的文件操作，都应该使用数据卷或绑定宿主目录，在这些位置操作会跳过容器存储层。 数据卷 (Volume) 的生存周期独立于容器，容器消亡，数据卷不会消亡。 容器的启动-运行-终止 ","date":"2022-07-18","objectID":"/2022071801/:3:2","tags":["Docker","学习"],"title":"Docker 笔记（一）","uri":"/2022071801/"},{"categories":["笔记"],"content":"仓库（Repository） Docker Registry 是一个集中存储、分发镜像的服务。一个 Docker Registry 中可以包含多个仓库 (Repository)；每个仓库有多个标签 (Tag)；每个标签对应一个镜像。通过格式 \u003c仓库名\u003e:\u003c标签\u003e 来指定具体这个软件的那个版本的镜像。latest 为默认标签。 有官方和第三方提供的免费或者收费相关服务，也可以通过 Docker 官方提供的镜像，在本地搭建私有 Docker Registry。 Docker 官方 Registry 公开服务 Docker hub 使用 Docker 镜像 ","date":"2022-07-18","objectID":"/2022071801/:3:3","tags":["Docker","学习"],"title":"Docker 笔记（一）","uri":"/2022071801/"},{"categories":["随笔"],"content":"​ 《我们生活在南京》走到了尾声，压抑中带有一丝平淡，人生也就是这样，终得一死，连翘还需要背负着”老师“之名等待半夏的到来，那枚摩斯码练习币将穿越时间和苦痛的长河见证整篇故事。 我们怀念一切，希望不只是因为”刀客“的到来。而是人性中美好的部分如同星光点缀的夜空，不是因为光亮，是因为漆黑的夜空而让人记忆深刻。 ICOM725\r","date":"2022-07-10","objectID":"/first_post/:0:0","tags":["读后感"],"title":"2022年的开始","uri":"/first_post/"},{"categories":null,"content":"关于我 胖子 总体能力平均以下 懂一点点网络（基本忘光） 懂一点点安全（皮毛而已） 大专生（毕业了） 本科生 最后，昵称的来源： 《初凉》 [宋] 吴可 初凉宜夜透衣罗，时见流星度绛河。 渐觉露漙金掌重，梧桐影外月明多。 为什么 记录学习生活，最大努力争取更好的自己。 日志 2022.07 初次建立，但没写啥东西。 2023.04 重新搭建了一遍，争取坚持写点东西。 本 Blog 由 Hugo 强力驱动 | 主题 - FixIt ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"}]